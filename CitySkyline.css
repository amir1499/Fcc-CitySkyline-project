/*Step 25Passed
That one used the fallback value as well? I see the problem now! The variables you declared in .bb1 do not cascade to the .bb2 and .bb3 sibling elements. That's just how CSS works. Because of this, variables are often declared in the :root selector. This is the highest level selector in CSS; putting your variables there will make them usable everywhere. Add the :root selector to the top of your stylesheet, and move all your variable declarations there.*/
:root{
  --building-color1: #aa80ff;
  --building-color2: #66cc99;
  --building-color3: #cc6699;
  --building-color4: #538cc6;
  --window-color1: #bb99ff;
  --window-color2: #8cd9b3;
  --window-color3: #d98cb3;
  --window-color4: #8cb3d9;
}

/*Step 5Passed
In CSS, you can target everything with an asterisk. Add a border to everything by using the * selector, and giving it a border of 1px solid black. This is a trick that helps visualize where elements are and their size. You will remove this later.*/
/*Step 6Passed
Also add a box-sizing of border-box to everything. This will make it so the border you added doesn't add any size to your elements.*/
/*Step 110
Okay, the buildings are done. Go back to the * selector and remove the border you applied to everything at the beginning and the buildings will come together.*/
*{
 /* border: 1px solid black;*/
  box-sizing: border-box;
}
/*Step 7Passed
You can see the body (it's the inner-most box on your page); the box around it is the html element. Make your body fill the whole viewport by giving it a height of 100vh. Remove the default margin from the body by setting the margin to 0. Finally, set the overflow property to hidden to hide any scroll bars that appear when something extends past the viewport.*/
body{
  height: 100vh;
  margin: 0;
  overflow: hidden;
}

/*Step 20Passed
The buildings are stacked on top of each other and running off the screen. Let's fix that. Add the properties display: flex;, align-items: flex-end;, and justify-content: space-evenly; to the background-buildings class. This will use flexbox again to evenly space the buildings across the bottom of the element.*/
.background-buildings,.foreground-buildings{
  width: 100%;
  height: 100%;
  display: flex;
  align-items: flex-end;
  justify-content: space-evenly;
  position: absolute;
  top: 0;
}

/*Step 13Passed
Give your .bb1 element these style properties: display: flex;, flex-direction: column;, and align-items: center;. This will center the parts of the building using "flex" or "flexbox". You will learn about it in more detail on another project.*/
/*Step 14Passed
Now you have something that is starting to resemble a building. Let's get into your first variable. Variable declarations begin with two dashes (-) and are given a name and a value like this: --variable-name: value;. In the .bb1 class, create a variable named --building-color1 and give it a value of #999.*/
/*Step 17Passed
Change the value of your variable from #999 to #aa80ff and you can see how it gets applied everywhere you used the variable. This is the main advantage of using variables, being able to quickly change many values in your stylesheet by just changing the value of a variable.*/

/*BACKGROUND BUILDINGS - "bb" stands for "background building" */
.building-wrap{
  display: flex;
  flex-direction: column;
  align-items: center;
}

.window-wrap{
  display: flex;
  align-items: center;
  justify-content: space-evenly;
}
/*Step 112
Give the sky class a radial-gradient. Use #ffcf33 from 0% to 20%, #ffff66 at 21%, and #bbeeff at 100%. This will add circular gradient to the background that will be your sun.*/
/*Step 113
At the top of the sky gradient color list, where you would put a direction for the gradient; add circle closest-corner at 15% 15%,. This will move the start of the gradient to 15% from the top and left. It will make it end at the closest-corner and it will maintain a circle shape. These are some keywords built into gradients to describe how it behaves.*/
.sky{
  background: radial-gradient(circle closest-corner at 15% 15%,#ffcf33 0%, #ffcf33 20%, #ffff66 21%, #bbeeff 100%);
}
.bb1{
  width: 10%;
  height: 70%;
  /*
  display: flex;
  flex-direction: column;
  align-items: center;
  --building-color1: #999;*/
 
}

/*Step 12Passed
Give the parts of your building width and height properties with these values: 70% and 10% to .bb1a, 80% and 10% to .bb1b, 90% and 10% to .bb1c, and 100% and 70% to .bb1d. Remember that these percentages are relative to the parent and note that the heights will add up to 100% - vertically filling the container.*/
/*Step 15Passed
To use a variable, put the variable name in parentheses with var in front of them like this: var(--variable-name). Add your variable as the value of the background-color property of the .bb1a class. Whatever value you gave the variable will be applied to whatever property you use it on. In this case, your variable has the value of #999. So #999 will be used as the value for the background-color property.*/

/*Step 40Passed
Gradients in CSS are a way to transition between colors across the distance of an element. They are applied to the background property and the syntax looks like this:

gradient-type(
  color1,
  color2
);
In the example, color1 is solid at the top, color2 is solid at the bottom, and in between it transitions evenly from one to the next. In .bb1a, add a gradient of type linear-gradient to the background property with --building-color1 as the first color and --window-color1 as the second.*/
.bb1a {
  width: 70%;
  /*
  background-color: var(--building-color1);
  height: 10%;
  background: linear-gradient(
      var(--building-color1),
      var(--window-color1)
    );*/
}


.bb1b {
  width: 80%;
  /*
  height: 10%;
  background-color: var(--building-color1);*/
}

.bb1c {
  width: 90%;
  /*
  height: 10%;
  background-color: var(--building-color1);*/
}

/*Step 44Passed
Gradients can use as many colors as you want like this:

gradient-type(
  color1,
  color2,
  color3
);
Add a linear-gradient to .bb1d with orange as the first color, --building-color1 as the second, and --window-color1 as the third. Remember to use the gradient on the background property.*/

/*Step 46Passed
You can specify where you want a gradient transition to complete by adding it to the color like this:

gradient-type(
  color1,
  color2 20%,
  color3
);
Here, it will transition from color1 to color2 between 0% and 20% of the element and then transition to color3 for the rest. Add 80% to the --building-color1 color of the .bb1d gradient so you can see it in action.*/
.bb1d {
  width: 100%;
  height: 70%;
  /*
  background-color: var(--building-color1);*/
  background: linear-gradient(
     /* orange,*/
      var(--building-color1)50%,
      var(--window-color1)
    );
}

/*Step 41Passed
You want to add the same gradient to the next two sections. Instead of doing that, create a new class selector called bb1-window, and move the height and background properties and values from .bb1a to the new class selector.*/
.bb1-window {
  height: 10%;
  background: linear-gradient(
      var(--building-color1),
      var(--window-color1)
    );
}

/*Step 23Passed
Hmm, I'm not sure why that didn't work. You can add a fallback value to a variable by putting it as the second value of where you use the variable like this: var(--variable-name, fallback-value). The property will use the fallback value when there's a problem with the variable. Add a fallback value of green to the background-color of .bb2.*/
.bb2 {
  width: 10%;
  height: 50%;
  /*
  background-color: var(--building-color2/*,green);*/
}

.bb2a {
 /* margin: auto;
  width: 5vw;
  height: 5vw;
  border-top: 1vw solid #000;
  */
  border-bottom: 5vw solid var(--building-color2);;
  border-left: /*1vw*/ 5vw solid /*#999*/ transparent;
  border-right: /*1vw*/ 5vw solid /*#999*/ transparent;
}

/*Step 51Passed
Gradient transitions often gradually change from one color to another. You can make the change a solid line like this:

linear-gradient(
  var(--first-color) 0%,
  var(--first-color) 40%,
  var(--second-color) 40%,
  var(--second-color) 80%
);
Add a linear-gradient to .bb2b that uses --building-color2 from 0% to 6% and --window-color2 from 6% to 9%.*/
/*Step 52Passed
You can see the hard color change at the top of the section. Change the gradient type from linear-gradient to repeating-linear-gradient for this section. This will make the four colors of your gradient repeat until it gets to the bottom of the element; giving you some stripes, and saving you from having to add a bunch of elements to create them.*/
.bb2b {
  width: 100%;
  height: 100%;
  /*
  background: linear-gradient(
      var(--building-color2),
      var(--building-color2) 6%,
      var(--window-color2) 6%,
      var(--window-color2) 9%
    );*/
    background: repeating-linear-gradient(
      var(--building-color2),
      var(--building-color2) 6%,
      var(--window-color2) 6%,
      var(--window-color2) 9%
          );
}

/*Step 60
So far, all the gradients you created have gone from top to bottom, that's the default direction. You can specify another direction by adding it before your colors like this:

gradient-type(
  direction,
  color1,
  color2
);
Fill in .bb3 with a repeating-linear-gradient. Use 90deg for the direction, your building-color3 for the first two colors, and window-color3 at 15% for the third. When you don't specify a distance for a color, it will use the values that makes sense. In this case, the first two colors will default to 0% and 7.5% because it starts at 0%, and 7.5% is half of the 15%.*/
.bb3 {
  width: 10%;
  height: 55%;
  /*background-color: var(--building-color3/*, pink);*/
  background: repeating-linear-gradient(90deg, var(--building-color3), var(--building-color3), var(--window-color3)15%);
}

.bb4 {
  width: 11%;
  height: 58%;
  /*background-color: var(--building-color4);*/
}
.bb4a{
  width: 3%;
  height: 10%;
  background-color: var(--building-color4);
}
.bb4b{
  width: 80%;
  height: 5%;
  background-color: var(--building-color4);
}
.bb4c{
  width: 100%;
  height: 85%;
  background-color: var(--building-color4);
}

.bb4-window{
  width: 18%;
  height: 90%;
  background-color: var(--window-color4);
}
    
/*Step 29Passed
You want the foreground buildings container to sit directly on top of the background buildings element. Give it a width and height of 100%, set the position to absolute, and the top to 0. This will make it the same size as the body and move the start of it to the top left corner.*/
/*.foreground-buildings {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  display: flex;
  align-items: flex-end;
  justify-content: space-evenly;
}*/

/* FOREGROUND BUILDINGS - "fb" stands for "foreground building" */

.fb1 {
  width: 10%;
  height: 60%;
  /*background-color: var(--building-color4);*/
}

.fb1a{
  border-bottom: 7vh solid var(--building-color4);
  border-left: 2vw solid transparent;
  border-right: 2vw solid transparent;
}
.fb1b{
  width: 60%;
  height: 10%;
  background-color: var(--building-color4);
}

/*Step 78
You can add multiple gradients to an element by separating them with a comma (,) like this:

gradient1(
  colors
),
gradient2(
  colors
);
Add a repeating-linear-gradient to .fb1c below the one that's there; use your --building-color4 from 0% to 10% and --window-color4 from 10% and 90%. This will fill in behind the gradient you added last.*/
.fb1c{
  width: 100%;
  height: 80%;
  background: repeating-linear-gradient(90deg,var(--building-color4)0%,var(--building-color4)10%,transparent 10%,transparent 15%),repeating-linear-gradient(var(--building-color4)0%,var(--building-color4)10%,var(--window-color4)10%,var(--window-color4)90%);
}

.fb2 {
  width: 10%;
  height: 40%;
  /*background-color: var(--building-color3);*/
}

.fb2a{
  width: 100%;
  border-bottom: 10vh solid var(--building-color3);
  border-left: 1vw solid transparent;
  border-right: 1vw solid transparent;
}
.fb2b{
  width: 100%;
  height: 75%;
  background-color: var(--building-color3);
}

.fb2-window{
  width: 22%;
  height: 100%;
  background-color: var(--window-color3);
}
.fb3 {
  width: 10%;
  height: 35%;
 /* background-color: var(--building-color1);*/
}

.fb3a{
  width: 80%;
  height: 15%;
  background-color: var(--building-color1);
}
.fb3b{
  width: 100%;
  height: 35%;
  background-color: var(--building-color1);
}
/*Step 37Passed
Move the position of .fb4 relative to where it is now by adding a position of relative and left of 10% to it. Do the same for .fb5 but use right instead of left. This will cover up the remaining white space in between the buildings.*/

.fb3-window{
  width: 25%;
  height: 80%;
  background-color: var(--window-color1);
}
.fb4 {
  width: 8%;
  height: 45%;
 /* background-color: var(--building-color1);
  position: relative;
  left: 10%;*/

}

.fb4a{
  border-top: 5vh solid transparent;
  border-left: 8vw solid var(--building-color1);
}
.fb4b{
  width: 100%;
  height: 89%;
  background-color: var(--building-color1);
  display: flex;
  flex-wrap: wrap;
}

.fb4-window{
  width:  30%;
  height: 10%;
  border-radius: 50%;
  background-color: var(--window-color1);
  margin: 10%;
}
.fb5 {
  width: 10%;
  height: 33%;
 /* background-color: var(--building-color2);*/
  position: relative;
  right: 10%;
  background:  repeating-linear-gradient(var(--building-color2)0%,var(--building-color2)5%,transparent 5%,transparent 10%),repeating-linear-gradient(90deg,var(--building-color2)0%,var(--building-color2)12%,var(--window-color2)12%,var(--window-color2)44%);

}

.fb6 {
  width: 9%;
  height: 38%;
  /*background-color: var(--building-color3);*/
  background:  repeating-linear-gradient(90deg,var(--building-color3)0%,var(--building-color3)10%,transparent 10%,transparent 30%),repeating-linear-gradient(
    var(--building-color3)0%,
    var(--building-color3) 10%,
    var(--window-color3) 10%,
    var(--window-color3) 30%
  );
}

/*Step 114
A media query can be used to change styles based on certain conditions, and they look like this:

@media (condition) {

}  
Add an empty media query at the bottom of your stylesheet with a condition of max-width: 1000px. Styles added in here will take effect when the document size is 1000px wide or less.*/
/*Step 115
Copy and paste your whole sky class along with all of its properties and values into the media query. You are going to make another color scheme for the skyline that changes it from day to night.

Note: You are going to need to scroll past the editable region to copy the class.*/

/*Step 118
Lastly, in the :root selector of the media query, redefine all four of the --window-color variables to use #777. When you're done, resize the window and watch it go from day to night.

Variables are primarily used with colors, and that's how you used them here. But they can be given any value and used on any property. Your project looks great!*/
@media (max-width: 1000px){
  :root{
    --building-color1: #000;
    --building-color2: #000;
    --building-color3: #000;
    --building-color4: #000;
    --window-color1: #777;
    --window-color2: #777;
    --window-color3: #777;
    --window-color4: #777;
  }

  .sky {
    background: radial-gradient(
        closest-corner circle at 15% 15%,
        #ccc,
        #ccc 20%,
        #445 21%,
        #223 100%
      );
  }
}
